/*
*  home page latest/recent alert list section (ui)
*/

import 'dart:math' as math;

import 'package:app/core/config/router/routes.dart';
import 'package:app/core/config/theme/app_colors.dart';
import 'package:app/core/utils/constants/dimens.dart';
import 'package:app/core/utils/enums/list_type.dart';
import 'package:app/core/utils/extension/context_extension.dart';
import 'package:app/core/utils/extension/number_extension.dart';
import 'package:app/core/utils/helper/common_style.dart';
import 'package:app/feature/alert_list/presentation/provider/alert_list_provider.dart';
import 'package:app/feature/alert_list/presentation/view_model/alert_list_view_model.dart';
import 'package:app/feature/alert_list/presentation/widget/alert_list_single_item.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../../../../core/utils/enums/user_type.dart';
import '../../../../shared/widget/shimmer_list.dart';
import 'package:dotted_line/dotted_line.dart';

class RecentSectionWidget extends StatelessWidget {
  const RecentSectionWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: horizontalSpace),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Latest Alerts',
                style: TextStyle(
                    fontSize: 14.sp,
                    fontWeight: FontWeight.w600,
                    color: AppColors.colorAppGrey),
              ),
              TextButton(
                onPressed: () {
                  final listType = context.read<AlertListProvider>().listType;
                  context.read<AlertListProvider>().updateListType(listType);
                  context.goNamed(Routes.alertList);
                },
                style: TextButton.styleFrom(
                  visualDensity: CommonStyle.minimumVisualDensity(),
                ),
                child: Text(
                  'See All',
                  style: TextStyle(
                      fontSize: 12.sp,
                      color: AppColors.colorAppBlue,
                      fontWeight: FontWeight.w600),
                ),
              )
            ],
          ),
        ),
        Padding(
          padding: EdgeInsets.symmetric(horizontal: horizontalSpace),
          child: DottedLine(dashColor: AppColors.colorGreyLight),
        ),
        _buildButtonSection(context),
        10.gapH,
        Expanded(child: _buildListSection(context))
      ],
    );
  }

  // load list from api and convert to manageable list
  Widget _buildListSection(BuildContext context) {
    return Selector<AlertListProvider, ListType>(
        selector: (_, p1) => p1.listType,
        builder: (_, type, __) =>
            Selector<AlertListProvider, List<AlertListViewModel>>(
              selector: (_, p2) => p2.getListBasedOnType(),
              builder: (_, list, __) => Selector<AlertListProvider, bool>(
                  selector: (_, p3) =>
                      p3.activeAlertListIsLoading ||
                      p3.closedAlertListIsLoading ||
                      p3.myAlertListIsLoading ||
                      p3.respondedAlertListIsLoading,
                  builder: (_, isLoading, __) {
                    if (isLoading) {
                      return ShimmerList(childHeight: 80.h);
                    }

                    return list.isEmpty
                        ? Center(
                            child: Text(
                              'No active alert in your area!',
                              style: TextStyle(
                                  fontSize: 12.sp,
                                  color: AppColors.colorAppGrey),
                            ),
                          )
                        : ListView.separated(
                            separatorBuilder: (context, index) => 16.gapH,
                      padding: EdgeInsets.symmetric(horizontal: horizontalSpace),
                            itemBuilder: (context, index) =>
                                AlertListSingleItem(item: list[index]),
                            itemCount: math.min(
                                context.userType == UserType.citizen ? 3 : 5,
                                list.length),
                          );
                  }),
            ));
  }

  // button of active, closed, user's own alerts and see all button
  Widget _buildButtonSection(
      BuildContext context) {
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: horizontalSpace),
      child: Selector<AlertListProvider, ListType>(
        selector: (_, provider) => provider.listType,
        builder: (_, value, __) => Row(
          children: [
            ElevatedButton(
              onPressed: () {
                context.read<AlertListProvider>().updateListType(ListType.active);
              },
              style: ElevatedButton.styleFrom(
                visualDensity: VisualDensity.compact,
                padding: EdgeInsets.symmetric(horizontal: 8.w),
                textStyle: TextStyle(fontSize: 14.sp),
                backgroundColor:
                    value == ListType.active ? AppColors.colorAppRed : null,
                foregroundColor: value == ListType.active
                    ? AppColors.colorWhite
                    : AppColors.colorAppRed,
              ),
              child: Text(
                'Active',
                style: TextStyle(fontSize: 12.sp),
              ),
            ),
            4.gapW,
            ElevatedButton(
              onPressed: () {
                context.read<AlertListProvider>().updateListType(ListType.closed);
              },
              style: ElevatedButton.styleFrom(
                visualDensity: VisualDensity.compact,
                padding: EdgeInsets.symmetric(horizontal: 8.w),
                textStyle: TextStyle(fontSize: 14.sp),
                backgroundColor:
                    value == ListType.closed ? AppColors.colorAppGreen : null,
                foregroundColor: value == ListType.closed
                    ? AppColors.colorWhite
                    : AppColors.colorAppGreen,
              ),
              child: Text(
                'Closed',
                style: TextStyle(
                  fontSize: 12.sp,
                ),
              ),
            ),
            4.gapW,
            ElevatedButton(
              onPressed: () {
                context
                    .read<AlertListProvider>()
                    .updateListType(ListType.responded);
              },
              style: ElevatedButton.styleFrom(
                visualDensity: VisualDensity.compact,
                padding: EdgeInsets.symmetric(horizontal: 8.w),
                textStyle: TextStyle(fontSize: 14.sp),
                backgroundColor: value == ListType.responded
                    ? AppColors.colorAppBlueDark
                    : null,
                foregroundColor: value == ListType.responded
                    ? AppColors.colorWhite
                    : AppColors.colorAppBlueDark,
              ),
              child: Text(
                'Responded',
                style: TextStyle(
                  fontSize: 12.sp,
                ),
              ),
            ),
            if (context.isCitizen) ...[
              4.gapW,
              ElevatedButton(
                onPressed: () {
                  context
                      .read<AlertListProvider>()
                      .updateListType(ListType.myList);
                },
                style: ElevatedButton.styleFrom(
                  visualDensity: VisualDensity.compact,
                  padding: EdgeInsets.symmetric(horizontal: 8.w),
                  textStyle: TextStyle(fontSize: 14.sp),
                  backgroundColor: value == ListType.myList
                      ? AppColors.colorAppBlueDark
                      : null,
                  foregroundColor: value == ListType.myList
                      ? AppColors.colorWhite
                      : AppColors.colorAppBlueDark,
                ),
                child: Text(
                  'My Alerts',
                  style: TextStyle(
                    fontSize: 12.sp,
                  ),
                ),
              ),
            ],
            const Spacer(),
            __ReloadingButton(),
          ],
        ),
      ),
    );
  }
}

class __ReloadingButton extends StatefulWidget {
  const __ReloadingButton({super.key});

  @override
  State<__ReloadingButton> createState() => __ReloadingButtonState();
}

class __ReloadingButtonState extends State<__ReloadingButton>
    with SingleTickerProviderStateMixin {
  late final AnimationController controller;
  late final Animation<double> animation;

  @override
  void initState() {
    super.initState();
    controller =
        AnimationController(vsync: this, duration: const Duration(seconds: 2));
    animation = Tween<double>(begin: 0, end: 1).animate(controller);
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Selector<AlertListProvider, bool>(
      selector: (_, p1) =>
          p1.activeAlertListIsLoading ||
          p1.closedAlertListIsLoading ||
          p1.myAlertListIsLoading ||
          p1.respondedAlertListIsLoading,
      builder: (_, isLoading, __) {
        if (!isLoading) {
          controller.stop();
        }
        return IconButton(
          onPressed: isLoading
              ? null
              : () {
                  context.read<AlertListProvider>().populateAllAlertList(
                      userId: context.userId, token: context.apiToken);
                  controller.repeat();
                },
          style: TextButton.styleFrom(
            visualDensity: VisualDensity.compact,
          ),
          icon: AnimatedBuilder(
            animation: animation,
            builder: (context, child) {
              return Transform.rotate(
                angle: controller.value * 2 * math.pi,
                child: child,
              );
            },
            child: Icon(
              Icons.refresh,
              color: context.colorScheme.primary,
            ),
          ),
        );
      },
    );
  }
}
