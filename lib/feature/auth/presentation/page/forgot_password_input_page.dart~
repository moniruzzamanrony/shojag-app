/*
* ui: forgot password input page
*/

import 'package:app/core/config/router/routes.dart';
import 'package:app/core/utils/extension/number_extension.dart';
import 'package:app/core/utils/validator/field_validators.dart';
import 'package:app/feature/auth/presentation/page/registration/reg_error_text_widget.dart';
import 'package:app/feature/auth/presentation/provider/forgot_password_provider.dart';
import 'package:app/feature/auth/presentation/widget/auth_button_widget.dart';
import 'package:app/feature/auth/presentation/widget/auth_text_field.dart';
import 'package:app/shared/widget/powered_by_widget.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/svg.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../../../../core/config/theme/app_colors.dart';
import '../../../../core/utils/constants/assets.dart';
import '../../../../core/utils/enums/message_type.dart';
import '../../../../core/utils/helper/helper_functions.dart';
import '../../../common/presentation/widget/drop_lottie_anim.dart';

class ForgotPasswordInputPage extends StatefulWidget {
  const ForgotPasswordInputPage({super.key});

  @override
  State<ForgotPasswordInputPage> createState() =>
      _ForgotPasswordInputPageState();
}

class _ForgotPasswordInputPageState extends State<ForgotPasswordInputPage> {
  final _formKey = GlobalKey<FormState>();
  late final TextEditingController emailOrPhoneController;
  late final FocusNode emailFocusNode;

  @override
  void initState() {
    super.initState();
    emailOrPhoneController = TextEditingController();
    emailFocusNode = FocusNode();
  }

  @override
  void dispose() {
    emailOrPhoneController.dispose();
    emailFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        fit: StackFit.expand,
        children: [
          SingleChildScrollView(
            padding: EdgeInsets.symmetric(horizontal: 16.w),
            child: SizedBox(
              height: 1.sh,
              child: Column(children: [
                SizedBox(
                  height: 195.h,
                  width: double.infinity,
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      const DropLottieAnim(),
                      SvgPicture.asset(
                        Assets.shojagLogoSvg,
                        height: 100.h,
                        width: 100.h,
                      ),
                    ],
                  ),
                ),
                Form(
                  key: _formKey,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Align(
                        alignment: Alignment.center,
                        child: Text(
                          'Forgot Password',
                          textAlign: TextAlign.center,
                          style: TextStyle(
                              fontSize: 20.sp,
                              height: 1,
                              fontWeight: FontWeight.w600,
                              color: AppColors.colorAppGreenDark),
                        ),
                      ),
                      20.gapH,
                      Align(
                        alignment: Alignment.center,
                        child: Text(
                          'Reset your account password and access your personal account again',
                          textAlign: TextAlign.center,
                          style: TextStyle(
                              fontSize: 14.sp,
                              fontWeight: FontWeight.w400,
                              height: 1.2,
                              color: AppColors.colorAppGrey),
                        ),
                      ),
                      30.gapH,
                      AuthTextField(
                        controller: emailOrPhoneController,
                        focusNode: emailFocusNode,
                        validator: FieldValidators.phoneValidator,
                        // suffixIcon: const Icon(
                        //   Icons.lock,
                        //   color: AppColors.colorAppGrey,
                        // ),
                        hintText: 'Phone',
                      ),
                      30.gapH,
                      AnimatedSize(
                        duration: const Duration(milliseconds: 350),
                        child: Selector<ForgotPasswordProvider, bool>(
                          selector: (_, provider) => provider.isOtpSending,
                          builder: (_, value, __) => value
                              ? SizedBox(
                                  height: 40.h,
                                  width: 40.h,
                                  child: const CircularProgressIndicator())
                              : AuthButtonWidget(
                                  buttonText: 'Send Code',
                                  onPressed: () {
                                    _sendCode(context);
                                  },
                                  buttonColor: AppColors.colorAppGreen),
                        ),
                      ),
                      16.gapH,
                      RegErrorTextWidget(),
                      16.gapH,
                    ],
                  ),
                ),
                Spacer(),
                PoweredByWidget(
                    textColor: AppColors.colorAppGrey,
                    imgColor: AppColors.colorPrimary),
              ]),
            ),
          ),
          Positioned(
              left: 20.w,
              top: 20.h,
              child: Row(
                children: [
                  InkWell(
                    onTap: () {
                      if (context.canPop()) {
                        context.pop();
                      }
                    },
                    child: CircleAvatar(
                      radius: 14.r,
                      child: Icon(
                        Icons.arrow_back,
                        size: 16.r,
                      ),
                    ),
                  )
                ],
              )),
        ],
      ),
    );
  }

  // send otp code to user
  void _sendCode(BuildContext ctx) async {
    FocusScope.of(ctx).unfocus();
    final isFormValid = _formKey.currentState?.validate();

    if (isFormValid == true) {
      final forgotPassProvider = ctx.read<ForgotPasswordProvider>();
      final emailOrPhone = emailOrPhoneController.text.trim();

      final userId = await forgotPassProvider
          .sendOtpCode(emailOrPhone: emailOrPhone)
          .onError(
        (error, stackTrace) {
          if (ctx.mounted) {
            showAppFlushBar(ctx,
                message: error?.toString(), type: MessageType.error);
          }
          return null;
        },
      );

      if (userId == null) {
        return;
      }

      if (ctx.mounted) {
        forgotPassProvider.emailOrPhone = emailOrPhone;
        forgotPassProvider.userId = userId;
        ctx.pushNamed(Routes.otpVerify);
      }
    }
  }
}
